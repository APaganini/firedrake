#!/bin/bash

# Note: mpiexec.1pps runs hybrid mpi+openmp jobs
# Behind the scenes, it sets:
# I_MPI_PIN=yes
# I_MPI_PIN_MODE=lib
# I_MPI_PIN_DOMAIN=socket
# I_MPI_PIN_ORDER=compact
# KMP_AFFINITY=granularity=fine,compact,1,0

FIREDRAKE=$FIREDRAKE_DIR
TILING=$FIREDRAKE/demos/tiling
EXECUTABLE=$TILING/wave_elastic.py
POPULATOR=$TILING/utils/copycache.py
MESHES=$WORK/meshes/wave_elastic

NODENAME=`cat $PBS_NODEFILE`
NODENAME="$( cut -d '.' -f 1 <<< "$NODENAME" )"

echo ------------------------------------------------------
echo -n 'Job is running on node '; echo $NODENAME
cat /proc/cpuinfo | grep "model name" | uniq
echo ------------------------------------------------------
echo PBS: qsub is running on $PBS_O_HOST
echo PBS: originating queue is $PBS_O_QUEUE
echo PBS: executing queue is $PBS_QUEUE
echo PBS: working directory is $PBS_O_WORKDIR
echo PBS: execution mode is $PBS_ENVIRONMENT
echo PBS: job identifier is $PBS_JOBID
echo PBS: job name is $PBS_JOBNAME
echo PBS: node file is $PBS_NODEFILE
echo PBS: current home directory is $PBS_O_HOME
echo PBS: PATH = $PBS_O_PATH
echo ------------------------------------------------------
echo PBS: PYTHONPATH = $PYTHONPATH
echo ------------------------------------------------------
echo PBS: SLOPE_BACKEND = $SLOPE_BACKEND
echo ------------------------------------------------------


export OMP_NUM_THREADS=1
export SLOPE_BACKEND=SEQUENTIAL

OPTS="--output 100000 --flatten True --nocache True"
TILE_OPTS="--fusion-mode only_tile --coloring default"

if [ "$nodename" -eq 0 ]; then
    nodename="haswell"
elif [ "$nodename" -eq 1 ]; then
    nodename="ivy"
else
    nodename="UNKNOWN"
fi

# To be used in Python-land
export NODETYPE=$nodename

LOGGER=$WORK"/logger_"$PBS_JOBNAME"_multinode_"$nodename"_h"$mesh".txt"
rm -f $LOGGER
touch $LOGGER

# Extra options for each mode
declare -a opts_em3=("")
declare -a opts_em4=("" "--extra-halo 1")
declare -a opts_em5=("" "--extra-halo 1")

# Should I run a specific poly order, as provided in input, or the hard-coded ones?
if [ -z "$polys" ]; then
    polys=(1 2 3 4)
fi

declare -a part_all=("chunk")

declare -a mesh_p1=("--mesh-size (300.0,150.0,$mesh)")
declare -a mesh_p2=("--mesh-size (300.0,150.0,$mesh)")
declare -a mesh_p3=("--mesh-size (300.0,150.0,$mesh)")
declare -a mesh_p4=("--mesh-size (300.0,150.0,$mesh)")

declare -a em_all=(3 4 5)
declare -a ts_p1=(250 320)
declare -a ts_p2=(140 200)
declare -a ts_p3=(60 75)
declare -a ts_p4=(45 70)

# Populate the local caches
export FIREDRAKE_FFC_KERNEL_CACHE_DIR=$HOME/cache/ffc-cache
export PYOP2_CACHE_DIR=$HOME/cache/pyop2-cache
python $POPULATOR
export FIREDRAKE_FFC_KERNEL_CACHE_DIR=$TMPDIR/ffc-cache
export PYOP2_CACHE_DIR=$TMPDIR/pyop2-cache


MPICMD="mpiexec -env FIREDRAKE_FFC_KERNEL_CACHE_DIR $FIREDRAKE_FFC_KERNEL_CACHE_DIR -env PYOP2_CACHE_DIR $PYOP2_CACHE_DIR -env NODETYPE $NODETYPE"

# Run actual experiments
for poly in ${polys[@]}
do
    OUT_FILE=$TMPDIR"/output_"$PBS_JOBNAME"_multinode_"$nodename"_p"$poly"_h"$mesh".txt"
    rm -f $OUT_FILE
    touch $OUT_FILE
    echo "Polynomial order "$poly >> $LOGGER
    mesh_p="mesh_p$poly[@]"
    meshes=( "${!mesh_p}" )
    for mesh in "${meshes[@]}"
    do
        echo "    Running "$mesh >> $LOGGER
        echo "        Untiled ..." >> $LOGGER
        $MPICMD python $EXECUTABLE --poly-order $poly $mesh $OPTS --num-unroll 0 1>> $OUT_FILE 2>> $OUT_FILE
        $MPICMD python $EXECUTABLE --poly-order $poly $mesh $OPTS --num-unroll 0 1>> $OUT_FILE 2>> $OUT_FILE
        $MPICMD python $EXECUTABLE --poly-order $poly $mesh $OPTS --num-unroll 0 1>> $OUT_FILE 2>> $OUT_FILE
        for p in ${part_all[@]}
        do
            for em in ${em_all[@]}
            do
                opts="opts_em$em[@]"
                opts_em=( "${!opts}" )
                for opt in "${opts_em[@]}"
                do
                    ts_p="ts_p$poly[*]"
                    for ts in ${!ts_p}
                    do
                        echo "        Tiled (pm="$p", ts="$ts", em="$em") ..." >> $LOGGER
                        $MPICMD python $EXECUTABLE --poly-order $poly $mesh $OPTS --num-unroll 1 --tile-size $ts --part-mode $p --explicit-mode $em $TILE_OPTS $opt 1>> $OUT_FILE 2>> $OUT_FILE
                    done
                done
            done
        done
    done
    mv $OUT_FILE $WORK/
done

rm $LOGGER
