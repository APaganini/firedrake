#! /usr/bin/env python
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from pprint import pformat
import logging
import sys
import os
import subprocess

parser = ArgumentParser(description="""Provide information on the currently downloaded version of Firedrake and its configuration.
This is particularly useful information to include when reporting bugs.""",
                        formatter_class=RawDescriptionHelpFormatter)
parser.add_argument("--log", action='store_true',
                    help="Log the output of the script to firedrake-status.log as well as to the console.")


args = parser.parse_args()

# Set up logging
if args.log:
    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)s %(levelname)-6s %(message)s',
                        filename='firedrake-status.log',
                        filemode='w')
    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(message)s')
    console.setFormatter(formatter)
    logging.getLogger().addHandler(console)
else:
    logging.basicConfig(level=logging.DEBUG,
                        format='%(message)s')
log = logging.getLogger()


def check_output(args, env=None):
    return subprocess.check_output(args, stderr=subprocess.STDOUT, env=env)


def quit(message):
    log.error(message)
    sys.exit(1)


try:
    firedrake_env = os.environ["VIRTUAL_ENV"]
except KeyError:
    quit("Unable to retrieve virtualenv name from the environment.\n Please ensure the virtualenv is active before running firedrake-update.")


try:
    import firedrake_configuration
except ImportError:
    log.info("Failed import firedrake_configuration module")
    config = {}
else:
    config = firedrake_configuration.get_config()

status = {}


for dir in sorted(os.listdir(firedrake_env + "/src")):
    if dir.startswith("h5py"):
        continue

    try:
        os.chdir(firedrake_env + "/src/" + dir)
    except OSError as e:
        if e.errno == 20:
            # Not a directory
            continue
        else:
            raise
    try:
        revision = check_output(["git", "rev-parse", "--short", "HEAD"]).strip()
        branch = check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"]).strip()
    except:
        log.error("Unable to retrieve git information from %s." % dir)
    else:
        try:
            _ = check_output(["git", "diff-index", "--quiet", "HEAD"])
            modified = False
        except subprocess.CalledProcessError as e:
            modified = True

        status[dir] = {"branch": branch,
                       "revision": revision,
                       "modified": modified}
config["component_status"] = status
log.info("Firedrake configuration: ")
log.info(pformat(config))
